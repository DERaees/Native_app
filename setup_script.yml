CREATE APPLICATION ROLE app_public;

CREATE OR ALTER VERSIONED SCHEMA core;
GRANT USAGE ON SCHEMA core TO APPLICATION ROLE app_public;

CREATE SCHEMA admin;

GRANT USAGE ON SCHEMA admin TO APPLICATION ROLE app_public;

CREATE OR ALTER VERSIONED SCHEMA private;
-- GRANT USAGE ON SCHEMA private TO APPLICATION ROLE app_public;

CREATE OR ALTER VERSIONED SCHEMA config;
GRANT USAGE ON SCHEMA config TO APPLICATION ROLE app_public;

CREATE OR ALTER VERSIONED SCHEMA EXT_SNOPTIMIZER_SERVICES;
GRANT USAGE ON SCHEMA EXT_SNOPTIMIZER_SERVICES TO APPLICATION ROLE app_public;

CREATE OR REPLACE TABLE ext_snoptimizer_services.ext_snoptimizer_log
(
run_id VARCHAR, 
run_sequence VARCHAR, 
step_id VARCHAR, 
status VARCHAR
);

CREATE OR REPLACE PROCEDURE private.install_proc_3()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ACCESS_HISTORY from prior 60 days'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.ACCESS_HISTORY WHERE QUERY_START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 3, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 3, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING ACCESS_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 3, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 3, 2, 'FAILURE')` });}
 
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_4()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_AUTOMATIC_CLUSTERING_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides AUTOMATIC_CLUSTERING_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.AUTOMATIC_CLUSTERING_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 4, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 4, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_AUTOMATIC_CLUSTERING_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING AUTOMATIC_CLUSTERING_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_AUTOMATIC_CLUSTERING_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 4, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 4, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_5()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_COPY_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides COPY_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.COPY_HISTORY WHERE LAST_LOAD_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 5, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 5, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_COPY_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING COPY_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_COPY_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 5, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 5, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_6()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASE_STORAGE_USAGE_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides DATABASE_STORAGE_USAGE_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY WHERE USAGE_DATE > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 6, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 6, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASE_STORAGE_USAGE_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING DATABASE_STORAGE_USAGE_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASE_STORAGE_USAGE_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 6, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 6, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_7()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATA_TRANSFER_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides DATA_TRANSFER_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.DATA_TRANSFER_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 7, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 7, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATA_TRANSFER_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING DATA_TRANSFER_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATA_TRANSFER_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 7, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 7, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_8()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOAD_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides LOAD_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.LOAD_HISTORY WHERE LAST_LOAD_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 8, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 8, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOAD_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING LOAD_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOAD_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 8, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 8, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_9()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOGIN_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides LOGIN_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY WHERE EVENT_TIMESTAMP > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 9, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 9, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOGIN_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING LOGIN_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOGIN_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 9, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 9, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_10()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEW_REFRESH_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides MATERIALIZED_VIEW_REFRESH_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.MATERIALIZED_VIEW_REFRESH_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 10, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 10, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEW_REFRESH_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING MATERIALIZED_VIEW_REFRESH_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEW_REFRESH_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 10, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 10, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_11()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_DAILY_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides METERING_DAILY_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.METERING_DAILY_HISTORY WHERE USAGE_DATE > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 11, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 11, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_DAILY_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING METERING_DAILY_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_DAILY_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 11, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 11, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_12()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides METERING_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.METERING_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 12, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 12, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING METERING_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 12, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 12, 2, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_13()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPE_USAGE_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides PIPE_USAGE_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.PIPE_USAGE_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 13, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 13, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPE_USAGE_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING PIPE_USAGE_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPE_USAGE_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 13, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 13, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_14()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides QUERY_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING QUERY_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_15()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides REPLICATION_USAGE_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.REPLICATION_USAGE_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 15, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 15, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING REPLICATION_USAGE_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 15, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 15, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_16()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEARCH_OPTIMIZATION_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides SEARCH_OPTIMIZATION_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.SEARCH_OPTIMIZATION_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 16, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 16, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEARCH_OPTIMIZATION_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING SEARCH_OPTIMIZATION_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEARCH_OPTIMIZATION_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 16, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 16, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_17()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SERVERLESS_TASK_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides SERVERLESS_TASK_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.SERVERLESS_TASK_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 17, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 17, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SERVERLESS_TASK_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING SERVERLESS_TASK_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SERVERLESS_TASK_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 17, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 17, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_18()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGE_STORAGE_USAGE_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides STAGE_STORAGE_USAGE_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.STAGE_STORAGE_USAGE_HISTORY WHERE USAGE_DATE > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 18, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 18, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGE_STORAGE_USAGE_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING STAGE_STORAGE_USAGE_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGE_STORAGE_USAGE_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 18, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 18, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_19()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STORAGE_USAGE_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides STORAGE_USAGE from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.STORAGE_USAGE WHERE USAGE_DATE > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 19, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 19, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STORAGE_USAGE_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING STORAGE_USAGE data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STORAGE_USAGE_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 19, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 19, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_20()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASK_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides TASK_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) R_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY WHERE QUERY_START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 20, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 20, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASK_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING TASK_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASK_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 20, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 20, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_21()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_EVENTS_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides WAREHOUSE_EVENTS_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_EVENTS_HISTORY WHERE TIMESTAMP > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 21, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 21, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_EVENTS_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING WAREHOUSE_EVENTS_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_EVENTS_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 21, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 21, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_22()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides WAREHOUSE_LOAD_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_LOAD_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 22, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 22, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING WAREHOUSE_LOAD_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 22, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 22, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_23()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_INSTALL COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides WAREHOUSE_METERING_HISTORY from prior 60 days '
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY WHERE START_TIME > DATEADD(DAY,-60,CURRENT_TIMESTAMP);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 23, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 23, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_ONGOING COMMENT='Snoptimizer Cost, Security, and Performance Optimization:  Table provides ONGOING WAREHOUSE_METERING_HISTORY data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 23, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 23, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_24()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW DATABASES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 24, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 24, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASES_INSTALL COMMENT='SHOW DATABASES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 24, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 24, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASES_ONGOING COMMENT='Table provides ONGOING DATABASES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 24, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 24, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_25()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW EXTERNAL FUNCTIONS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 25, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 25, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_FUNCTIONS_INSTALL COMMENT='SHOW EXTERNAL FUNCTIONS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 25, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 25, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_FUNCTIONS_ONGOING COMMENT='Table provides ONGOING EXTERNAL FUNCTIONS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_FUNCTIONS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 25, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 25, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_26()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW EXTERNAL TABLES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 26, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 26, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_TABLES_INSTALL COMMENT='SHOW EXTERNAL TABLES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 26, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 26, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_TABLES_ONGOING COMMENT='Table provides ONGOING EXTERNAL TABLES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_TABLES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 26, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 26, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_27()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW FILE FORMATS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 27, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 27, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_FILE_FORMATS_INSTALL COMMENT='SHOW FILE FORMATS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 27, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 27, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_FILE_FORMATS_ONGOING COMMENT='Table provides ONGOING FILE FORMATS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_FILE_FORMATS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 27, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 27, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_29()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW MASKING POLICIES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 29, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 29, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MASKING_POLICIES_INSTALL COMMENT='SHOW MASKING POLICIES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 29, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 29, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MASKING_POLICIES_ONGOING COMMENT='Table provides ONGOING MASKING POLICIES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MASKING_POLICIES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 29, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 29, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_30()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW MATERIALIZED VIEWS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 30, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 30, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEWS_INSTALL COMMENT='SHOW MATERIALIZED VIEWS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 30, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 30, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEWS_ONGOING COMMENT='Table provides ONGOING MATERIALIZED VIEWS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEWS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 30, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 30, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_32()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW PIPES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 32, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 32, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPES_INSTALL COMMENT='SHOW PIPES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 32, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 32, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPES_ONGOING COMMENT='Table provides ONGOING PIPES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 32, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 32, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_33()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW PROCEDURES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 33, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 33, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PROCEDURES_INSTALL COMMENT='SHOW PROCEDURES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 33, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 33, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PROCEDURES_ONGOING COMMENT='Table provides ONGOING PROCEDURES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PROCEDURES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 33, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 33, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_35()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW REPLICATION DATABASES;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 35, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 35, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_DATABASES_INSTALL COMMENT='SHOW REPLICATION DATABASES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 35, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 35, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_DATABASES_ONGOING COMMENT='Table provides ONGOING REPLICATION DATABASES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_DATABASES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 35, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 35, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_37()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW SCHEMAS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 37, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 37, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SCHEMAS_INSTALL COMMENT='SHOW SCHEMAS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 37, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 37, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SCHEMAS_ONGOING COMMENT='Table provides ONGOING SCHEMAS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SCHEMAS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 37, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 37, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_38()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW SEQUENCES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 38, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 38, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEQUENCES_INSTALL COMMENT='SHOW SEQUENCES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 38, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 38, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEQUENCES_ONGOING COMMENT='Table provides ONGOING SEQUENCES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEQUENCES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 38, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 38, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_40()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW STAGES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 40, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 40, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGES_INSTALL COMMENT='SHOW STAGES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 40, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 40, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGES_ONGOING COMMENT='Table provides ONGOING STAGES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 40, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 40, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_41()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW STREAMS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 41, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 41, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STREAMS_INSTALL COMMENT='SHOW STREAMS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 41, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 41, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STREAMS_ONGOING COMMENT='Table provides ONGOING STREAMS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STREAMS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 41, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 41, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_42()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW TABLES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 42, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 42, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TABLES_INSTALL COMMENT='SHOW TABLES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 42, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 42, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TABLES_ONGOING COMMENT='Table provides ONGOING TABLES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TABLES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 42, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 42, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_43()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW TASKS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 43, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 43, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASKS_INSTALL COMMENT='SHOW TASKS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 43, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 43, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASKS_ONGOING COMMENT='Table provides ONGOING TASKS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASKS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 43, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 43, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_44()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW USER FUNCTIONS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 44, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 44, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_USER_FUNCTIONS_INSTALL COMMENT='SHOW USER FUNCTIONS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 44, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 44, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_USER_FUNCTIONS_ONGOING COMMENT='Table provides ONGOING USER FUNCTIONS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_USER_FUNCTIONS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 44, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 44, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_46()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW VIEWS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 46, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 46, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_VIEWS_INSTALL COMMENT='SHOW VIEWS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2))) WHERE "schema_name" <> 'INFORMATION_SCHEMA';`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 46, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 46, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_VIEWS_ONGOING COMMENT='Table provides ONGOING VIEWS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_VIEWS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 46, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 46, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_47()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW WAREHOUSES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 47, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 47, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_INSTALL COMMENT='SHOW WAREHOUSES AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 47, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 47, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING COMMENT='Table provides ONGOING WAREHOUSES data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 47, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 47, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_48()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`SHOW RESOURCE MONITORS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 48, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 48, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_INSTALL COMMENT='SHOW RESOURCE MONITORS AT INSTALL'
AS
SELECT TO_NUMBER(0,38,0) RUN_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 48, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 48, 2, 'FAILURE')` });}
SQL_TEXT3=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_ONGOING COMMENT='Table provides ONGOING RESOURCE MONITORS data for analysis'
 AS SELECT * FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_INSTALL;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT3 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 48, 3, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 48, 3, 'FAILURE')` });}
  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_51()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_PARAMETERS (RUN_ID INT, "key" VARCHAR, "value" VARCHAR, "default" VARCHAR, "level" VARCHAR, "description" VARCHAR, "type" VARCHAR, WAREHOUSE_NAME VARCHAR, LOGGED_DT TIMESTAMP_LTZ(9) );`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 51, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 51, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_52()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER
(
ID INT,
RUN_ID INT,
OBJECT_NAME VARCHAR,
ACTION_ID INT,
EXT_SNOPT_ID BINARY,
SQL_TEXT1 BINARY,
SQL_TEXT2 BINARY,
SQL_TEXT_STATUS VARCHAR,
SQL_MODE VARCHAR,
EST_COST_SAVINGS_CREDITS DECIMAL,
EST_RISK_SAVINGS_CREDITS DECIMAL,  
EST_RISK_SAVINGS_MAXWAREHOUSE_CREDITS DECIMAL,
EST_SECURITY_RISK_LEVEL VARCHAR,
CREATED_DT TIMESTAMP_NTZ,
IMPLEMENTED_DT TIMESTAMP_NTZ
);
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 52, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 52, 1, 'FAILURE')` });
}
SQL_TEXT2=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS
AS
SELECT TO_NUMBER(0,38,0) RUN_ID, CURRENT_TIMESTAMP LOGGED_DT,CURRENT_ACCOUNT() LOCATOR;`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 52, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 52, 2, 'FAILURE')` });}

  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_102()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_BY_COST_INSTALL AS SELECT
    COALESCE(WC.WAREHOUSE_NAME,QC.WAREHOUSE_NAME) AS WAREHOUSE_NAME
    ,QC.QUERY_COUNT_LAST_MONTH
    ,WC.CREDITS_USED_LAST_MONTH
FROM (
    SELECT
       WAREHOUSE_NAME
      ,COUNT(QUERY_ID) as QUERY_COUNT_LAST_MONTH
    FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
    WHERE TO_DATE(START_TIME) >= TO_DATE(DATEADD(month,-1,CURRENT_TIMESTAMP()))
    GROUP BY WAREHOUSE_NAME
      ) QC
JOIN (
    SELECT
        WAREHOUSE_NAME
        ,SUM(CREDITS_USED) as CREDITS_USED_LAST_MONTH
    FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
    WHERE TO_DATE(START_TIME) >= TO_DATE(DATEADD(month,-1,CURRENT_TIMESTAMP()))
    GROUP BY WAREHOUSE_NAME
  ) WC
    ON WC.WAREHOUSE_NAME = QC.WAREHOUSE_NAME
ORDER BY CREDITS_USED_LAST_MONTH DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 102, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 102, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_127()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE SECURE VIEW EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER_DAILY_ISSUES_SUMMARY AS
SELECT OBJECT_NAME, DATEADD(D,-1,DATE_TRUNC(D,CREATED_DT)) DATE_CHECK, COUNT(*) COUNT_IMPROVEMENTS, 
SUM(EST_COST_SAVINGS_CREDITS) EST_COST_SAVINGS_CREDITS_SUM, 
SUM(EST_RISK_SAVINGS_CREDITS) EST_RISK_SAVINGS_CREDITS_SUM
FROM EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER
WHERE RUN_ID >= (SELECT MAX(RUN_ID)-1 FROM EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER)
GROUP BY OBJECT_NAME, DATEADD(D,-1,DATE_TRUNC(D,CREATED_DT));`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 127, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 127, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;



CREATE OR REPLACE PROCEDURE private.install_proc_138()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TASK ADMIN.EXT_SNOPTIMIZER
  WAREHOUSE = reference('ext_snoptimizer_wh')
  SCHEDULE = 'USING CRON 0 */4 * * * America/Los_Angeles'
  TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD HH24'
  ALLOW_OVERLAPPING_EXECUTION = FALSE 
  COMMENT = 'Recurring Snoptimizer Task' 
AS
CALL private.recurring_run();`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 138, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 138, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.install_proc_142()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`ALTER TASK ADMIN.EXT_SNOPTIMIZER RESUME;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 142, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 142, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_138()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TASK ADMIN.ASSESS_SNOPTIMIZER
  WAREHOUSE = reference('ext_snoptimizer_wh')
  SCHEDULE = 'USING CRON 0 0 * * * America/Los_Angeles'
  TIMESTAMP_INPUT_FORMAT = 'YYYY-MM-DD HH24'
  ALLOW_OVERLAPPING_EXECUTION = FALSE 
  COMMENT = 'Assessment Snoptimizer Task' 
AS
CALL private.assessment();`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 0138, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 0138, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_142()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`ALTER TASK ADMIN.ASSESS_SNOPTIMIZER RESUME;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 142, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 142, 1, 'FAILURE')` });
}


  
if (error == '') {
    message = "Snoptimizer INSTALL Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.grant_select()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS 
$$
    error = ''
    message = ''
    try{
            snowflake.execute({sqlText: "GRANT SELECT ON ALL TABLES IN SCHEMA EXT_SNOPTIMIZER_SERVICES TO APPLICATION ROLE APP_PUBLIC"  });
            message = message + '\n' +  "Success";
        }
        catch (err){
            error = error + "ERROR: " + err; 
      }

    message = 'Message: ' + message;
    message = message + '\n' + 'Error: ' + error;
    return message;
$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_53()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) + 1 FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS
(RUN_ID, LOGGED_DT, LOCATOR)
VALUES
(?, CURRENT_TIMESTAMP, CURRENT_ACCOUNT() );`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 53, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 53, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_54()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.ACCESS_HISTORY WHERE QUERY_START_TIME > (SELECT MAX(QUERY_START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 54, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 54, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_55()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.ACCESS_HISTORY WHERE QUERY_START_TIME > (SELECT MAX(QUERY_START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_ACCESS_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 55, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 55, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_56()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_COPY_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.COPY_HISTORY WHERE LAST_LOAD_TIME > (SELECT MAX(LAST_LOAD_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_COPY_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 56, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 56, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_57()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASE_STORAGE_USAGE_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY WHERE USAGE_DATE > (SELECT MAX(USAGE_DATE) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASE_STORAGE_USAGE_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 57, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 57, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_58()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATA_TRANSFER_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.DATA_TRANSFER_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATA_TRANSFER_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 58, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 58, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_59()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOAD_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.LOAD_HISTORY WHERE LAST_LOAD_TIME > (SELECT MAX(LAST_LOAD_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOAD_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 59, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 59, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_60()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOGIN_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY WHERE EVENT_TIMESTAMP > (SELECT MAX(EVENT_TIMESTAMP) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_LOGIN_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 60, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 60, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_61()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEW_REFRESH_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.MATERIALIZED_VIEW_REFRESH_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEW_REFRESH_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 61, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 61, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_62()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_DAILY_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.METERING_DAILY_HISTORY WHERE USAGE_DATE > (SELECT MAX(USAGE_DATE) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_DAILY_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 62, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 62, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_63()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.METERING_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_METERING_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 63, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 63, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_64()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPE_USAGE_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.PIPE_USAGE_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPE_USAGE_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 64, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 64, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_65()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 65, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 65, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_66()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.REPLICATION_USAGE_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 66, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 66, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_67()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEARCH_OPTIMIZATION_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.SEARCH_OPTIMIZATION_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEARCH_OPTIMIZATION_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 67, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 67, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_68()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SERVERLESS_TASK_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.SERVERLESS_TASK_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SERVERLESS_TASK_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 68, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 68, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_69()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGE_STORAGE_USAGE_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.STAGE_STORAGE_USAGE_HISTORY WHERE USAGE_DATE > (SELECT MAX(USAGE_DATE) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGE_STORAGE_USAGE_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 69, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 69, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_70()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STORAGE_USAGE_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.STORAGE_USAGE WHERE USAGE_DATE > (SELECT MAX(USAGE_DATE) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STORAGE_USAGE_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 70, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 70, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_71()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASK_HISTORY_ONGOING
SELECT TO_NUMBER(0,38,0) R_ID,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.TASK_HISTORY WHERE QUERY_START_TIME > (SELECT MAX(QUERY_START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASK_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 71, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 71, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_72()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_EVENTS_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_EVENTS_HISTORY WHERE TIMESTAMP > (SELECT MAX(TIMESTAMP) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_EVENTS_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 72, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 72, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_73()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_LOAD_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 73, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 73, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_74()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY WHERE START_TIME > (SELECT MAX(START_TIME) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_ONGOING);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 74, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 74, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_75()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW DATABASES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 75, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 75, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 75, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 75, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_76()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW EXTERNAL FUNCTIONS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 76, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 76, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_FUNCTIONS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 76, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 76, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_77()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW EXTERNAL TABLES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 77, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 77, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_TABLES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 77, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 77, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_78()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW FILE FORMATS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 78, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 78, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_FILE_FORMATS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 78, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 78, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_80()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW MASKING POLICIES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 80, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 80, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MASKING_POLICIES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 80, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 80, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_81()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW MATERIALIZED VIEWS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 81, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 81, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEWS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 81, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 81, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_83()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW PIPES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 83, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 83, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 83, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 83, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_84()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW PROCEDURES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 84, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 84, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PROCEDURES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 84, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 84, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_86()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW REPLICATION DATABASES;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 86, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 86, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_DATABASES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 86, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 86, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_88()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW SCHEMAS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 88, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 88, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SCHEMAS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 88, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 88, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_89()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW SEQUENCES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 89, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 89, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEQUENCES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 89, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 89, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_91()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW STAGES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 91, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 91, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 91, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 91, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_92()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW STREAMS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 92, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 92, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STREAMS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 92, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 92, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_93()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW TABLES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 93, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 93, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TABLES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 93, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 93, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_94()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW TASKS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 94, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 94, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASKS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 94, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 94, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_95()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW USER FUNCTIONS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 95, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 95, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_USER_FUNCTIONS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 95, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 95, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_97()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW VIEWS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 97, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 97, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_VIEWS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2))) WHERE "schema_name" <> 'INFORMATION_SCHEMA';`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 97, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 97, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_98()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW WAREHOUSES IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 98, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 98, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 98, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 98, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.recurring_run_proc_99()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`SHOW RESOURCE MONITORS IN ACCOUNT;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 99, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 99, 1, 'FAILURE')` });
}
SQL_TEXT2=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_ONGOING
SELECT ?,*, CURRENT_TIMESTAMP() LOGGED_DT FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-2)));`;
 try{
    snowflake.execute({sqlText: SQL_TEXT2, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 99, 2, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 99, 2, 'FAILURE')` });}

if (error == '') {
    message = "Snoptimizer RECURRING_RUN Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;


CREATE OR REPLACE PROCEDURE CONFIG.REGISTER_SINGLE_CALLBACK(ref_name string, operation string, ref_or_alias string)
RETURNS STRING
LANGUAGE SQL
AS 
$$
  BEGIN
    CASE (operation)
        WHEN 'ADD' THEN
            SELECT SYSTEM$SET_REFERENCE(:ref_name, :ref_or_alias);
        WHEN 'REMOVE' THEN
            SELECT SYSTEM$REMOVE_REFERENCE(:ref_name);
        WHEN 'CLEAR' THEN
            SELECT SYSTEM$REMOVE_REFERENCE(ref_name);
        ELSE
            RETURN 'unknown operation: ' || operation;
    END CASE;
  RETURN NULL;
  END;
$$;

GRANT USAGE ON PROCEDURE CONFIG.REGISTER_SINGLE_CALLBACK(string, string, string) TO APPLICATION ROLE app_public;

CREATE OR REPLACE TABLE private.its_accounts
COMMENT='IMPORTANT Table that gets inserted too from kinsta servers.
This is where all of our Customer Account information resides.'
(
ACCOUNT_NAME VARCHAR,
ACCOUNT_FULLURL VARCHAR,
ACCOUNT_REGION VARCHAR,
ACCOUNT_TIMEZONE VARCHAR,
ACCOUNT_STATUS VARCHAR,
SFLAKE_EDITION VARCHAR,
SNOPT_EDITION VARCHAR,
SNOPT_VERSION_NOW VARCHAR,
SNOPT_VERSION_INSTALLED_DT TIMESTAMP_NTZ,
SNOPT_VERSION_PREV VARCHAR,
PASS_KEY VARCHAR,
CREATED_ON TIMESTAMP_NTZ,
UPDATED_ON TIMESTAMP_NTZ,
ACCOUNT_TYPE VARCHAR,
ACCOUNT_LOCATOR VARCHAR,
BILLING_FIRST_NAME VARCHAR,
BILLING_LAST_NAME VARCHAR,
BILLING_EMAIL VARCHAR
);

INSERT INTO private.its_accounts (PASS_KEY, ACCOUNT_LOCATOR) VALUES ('123', CURRENT_ACCOUNT());


CREATE OR REPLACE SECURE FUNCTION admin.pass_key(ACCT VARCHAR)
RETURNS VARCHAR
LANGUAGE SQL
COMMENT='This function takes ACCOUNT_NAME_LOCATOR input 
--snowflake is all messed up now with the difference of 
ACCOUNT_NAME_LOCATOR and ACCOUNT_NAME [going forward]
and then it retrieves secret key we use to unlock encryption.'
AS $$
    SELECT MAX(PASS_KEY)::VARCHAR AS PASS_KEY FROM private.its_accounts WHERE lower(ACCOUNT_LOCATOR) = lower(ACCT)
$$;

GRANT USAGE ON FUNCTION admin.pass_key(VARCHAR) TO APPLICATION ROLE app_public;


CREATE OR REPLACE PROCEDURE private.tests_proc_103()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER(RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT2,SQL_TEXT_STATUS
,EST_RISK_SAVINGS_CREDITS,EST_RISK_SAVINGS_MAXWAREHOUSE_CREDITS
,CREATED_DT)
WITH
WAREHOUSES_NO_RM AS
(SELECT "name", "size" FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_INSTALL WHERE "resource_monitor" = 'null'),
WAREHOUSE_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'Medium' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT '5X-Large' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT '6X-Large' AS WAREHOUSE_SIZE, 512 AS NODES)
),
WAREHOUSES_AVG_EXECUTION_TIME AS
(WITH DAILY_EXECUTION_TIME_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(TOTAL_ELAPSED_TIME) AS DAILY_EXECUTION_TIME_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_EXECUTION_TIME_USED) AVGDAILYEXECUTIONTIME, MIN(DAILY_EXECUTION_TIME_USED), MAX(DAILY_EXECUTION_TIME_USED) MAXDAILYEXECUTIONTIME
FROM DAILY_EXECUTION_TIME_BY_WH GROUP BY 1),
WAREHOUSES_MIN_MAX AS
(WITH DAILY_CREDITS_USED_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(CREDITS_USED_COMPUTE) AS DAILY_CREDITS_USED
FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_CREDITS_USED), MIN(DAILY_CREDITS_USED), IFF(MAX(DAILY_CREDITS_USED)=0,1,MAX(DAILY_CREDITS_USED)) MAXCREDITS
FROM DAILY_CREDITS_USED_BY_WH GROUP BY 1)
SELECT ?, 101 ACTION_ID
,encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('CREATE OR REPLACE RESOURCE MONITOR EXT_SNOPT_' || MM.WAREHOUSE_NAME || '_RM WITH CREDIT_QUOTA = ' || CEIL(MAXCREDITS*1.3) || ', frequency = ''DAILY'', start_timestamp = ''IMMEDIATELY'', end_timestamp = null TRIGGERS ON 100 PERCENT DO SUSPEND ON 80 PERCENT DO NOTIFY;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,encrypt('ALTER WAREHOUSE ' || MM.WAREHOUSE_NAME || ' SET RESOURCE_MONITOR = EXT_SNOPT_' || MM.WAREHOUSE_NAME || '_RM;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT2
,'CREATED'
,(24 - TO_DECIMAL(AVGDAILYEXECUTIONTIME/(1000*60*60),10,3)) * NODES EST_DAILY_RISK_SAVINGS_CREDITS
,(24 - TO_DECIMAL(AVGDAILYEXECUTIONTIME/(1000*60*60),10,3)) * 512 EST_DAILY_RISK_SAVINGS_CREDITS
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_NO_RM, WAREHOUSE_SIZE, WAREHOUSES_MIN_MAX MM, WAREHOUSES_AVG_EXECUTION_TIME
WHERE "name" = MM.WAREHOUSE_NAME AND MM.WAREHOUSE_NAME= WAREHOUSES_AVG_EXECUTION_TIME.WAREHOUSE_NAME
AND WAREHOUSE_SIZE = "size"
;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 103, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 103, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_104()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER(RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT2,SQL_TEXT_STATUS
,EST_RISK_SAVINGS_CREDITS,EST_RISK_SAVINGS_MAXWAREHOUSE_CREDITS
,CREATED_DT)
WITH
WAREHOUSES_NO_RM AS
(SELECT IWO."name" WH_NAME, "size","resource_monitor", IRMO.* FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING IWO, EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_ONGOING IRMO 
 WHERE IWO."resource_monitor"=IRMO."name" AND "resource_monitor" <> 'null' and "frequency"='DAILY' and "suspend_at" IS NULL and "suspend_immediately_at" IS NULL),
WAREHOUSE_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'Medium' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT '5X-Large' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT '6X-Large' AS WAREHOUSE_SIZE, 512 AS NODES)
),
WAREHOUSES_AVG_EXECUTION_TIME AS
(WITH DAILY_EXECUTION_TIME_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(TOTAL_ELAPSED_TIME) AS DAILY_EXECUTION_TIME_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_EXECUTION_TIME_USED) AVGDAILYEXECUTIONTIME, MIN(DAILY_EXECUTION_TIME_USED) MINDAILYEXECUTIONTIME, MAX(DAILY_EXECUTION_TIME_USED) MAXDAILYEXECUTIONTIME
FROM DAILY_EXECUTION_TIME_BY_WH GROUP BY 1),
WAREHOUSES_MIN_MAX AS
(WITH DAILY_CREDITS_USED_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(CREDITS_USED_COMPUTE) AS DAILY_CREDITS_USED
FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_CREDITS_USED), MIN(DAILY_CREDITS_USED), IFF(MAX(DAILY_CREDITS_USED)=0,1,MAX(DAILY_CREDITS_USED)) MAXCREDITS
FROM DAILY_CREDITS_USED_BY_WH GROUP BY 1)
SELECT ?, 102 ACTION_ID
,encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('ALTER RESOURCE MONITOR ' || WAREHOUSES_NO_RM."resource_monitor" || ' SET CREDIT_QUOTA = ' || CEIL(MAXCREDITS*1.3) || ', frequency = ''DAILY'', start_timestamp = ''IMMEDIATELY'', end_timestamp = null TRIGGERS ON 100 PERCENT DO SUSPEND ON 70 PERCENT DO NOTIFY;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1, '' SQL_TEXT2
,'CREATED'
,(24 - TO_DECIMAL(AVGDAILYEXECUTIONTIME/(1000*60*60),10,3)) * NODES EST_DAILY_RISK_SAVINGS_CREDITS
,(24 - TO_DECIMAL(AVGDAILYEXECUTIONTIME/(1000*60*60),10,3)) * 512 EST_DAILY_RISK_SAVINGS_CREDITS
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_NO_RM, WAREHOUSE_SIZE, WAREHOUSES_MIN_MAX MM, WAREHOUSES_AVG_EXECUTION_TIME
WHERE WAREHOUSES_NO_RM.WH_NAME = MM.WAREHOUSE_NAME AND MM.WAREHOUSE_NAME= WAREHOUSES_AVG_EXECUTION_TIME.WAREHOUSE_NAME
AND WAREHOUSE_SIZE = "size";`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 104, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 104, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_105()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER(RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT2,SQL_TEXT_STATUS
,EST_RISK_SAVINGS_CREDITS,EST_RISK_SAVINGS_MAXWAREHOUSE_CREDITS
,CREATED_DT)
WITH
WAREHOUSES_NO_RM AS
(SELECT IWO."name" WH_NAME, "size","resource_monitor", IRMO.* FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING IWO, EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_ONGOING IRMO 
 WHERE IWO."resource_monitor"=IRMO."name" AND "resource_monitor" <> 'null' and "frequency"<>'DAILY'),
WAREHOUSE_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'Medium' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT '5X-Large' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT '6X-Large' AS WAREHOUSE_SIZE, 512 AS NODES)
),
WAREHOUSES_AVG_EXECUTION_TIME AS
(WITH DAILY_EXECUTION_TIME_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(TOTAL_ELAPSED_TIME) AS DAILY_EXECUTION_TIME_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_EXECUTION_TIME_USED) AVGDAILYEXECUTIONTIME, MIN(DAILY_EXECUTION_TIME_USED), MAX(DAILY_EXECUTION_TIME_USED) MAXDAILYEXECUTIONTIME
FROM DAILY_EXECUTION_TIME_BY_WH GROUP BY 1),
WAREHOUSES_MIN_MAX AS
(WITH DAILY_CREDITS_USED_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(CREDITS_USED_COMPUTE) AS DAILY_CREDITS_USED
FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_CREDITS_USED), MIN(DAILY_CREDITS_USED), IFF(MAX(DAILY_CREDITS_USED)=0,1,MAX(DAILY_CREDITS_USED)) MAXCREDITS
FROM DAILY_CREDITS_USED_BY_WH GROUP BY 1)
SELECT ?, 103 ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('CREATE OR REPLACE RESOURCE MONITOR EXT_SNOPT_' || MM.WAREHOUSE_NAME || '_RM WITH CREDIT_QUOTA = ' || CEIL(MAXCREDITS*1.3) || ', frequency = ''DAILY'', start_timestamp = ''IMMEDIATELY'', end_timestamp = null TRIGGERS ON 100 PERCENT DO SUSPEND ON 80 PERCENT DO NOTIFY;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,encrypt('ALTER WAREHOUSE ' || MM.WAREHOUSE_NAME || ' SET RESOURCE_MONITOR = EXT_SNOPT_' || MM.WAREHOUSE_NAME || '_RM;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT2
,'CREATED'
,(24 - TO_DECIMAL(AVGDAILYEXECUTIONTIME/(1000*60*60),10,3)) * NODES EST_DAILY_RISK_SAVINGS_CREDITS
,(24 - TO_DECIMAL(AVGDAILYEXECUTIONTIME/(1000*60*60),10,3)) * 512 EST_DAILY_RISK_SAVINGS_CREDITS
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_NO_RM, WAREHOUSE_SIZE, WAREHOUSES_MIN_MAX MM, WAREHOUSES_AVG_EXECUTION_TIME
WHERE WAREHOUSES_NO_RM.WH_NAME = MM.WAREHOUSE_NAME AND MM.WAREHOUSE_NAME= WAREHOUSES_AVG_EXECUTION_TIME.WAREHOUSE_NAME
AND WAREHOUSE_SIZE = "size";`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 105, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 105, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_108()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER(RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT2,SQL_TEXT_STATUS
,EST_RISK_SAVINGS_CREDITS
,CREATED_DT)
WITH
WAREHOUSES_NO_RM AS
(SELECT "name", "size", TIMEOUT_IN_SECONDS FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_INSTALL JOIN
    (SELECT WAREHOUSE_NAME,"value" TIMEOUT_IN_SECONDS  FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_PARAMETERS WHERE "key"='STATEMENT_TIMEOUT_IN_SECONDS') PARAMS
    ON "name" = WAREHOUSE_NAME WHERE TIMEOUT_IN_SECONDS > 7200
),
WAREHOUSE_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'Medium' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT '5X-Large' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT '6X-Large' AS WAREHOUSE_SIZE, 512 AS NODES)
),
WAREHOUSES_AVG_EXECUTION_TIME AS
(WITH DAILY_EXECUTION_TIME_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(TOTAL_ELAPSED_TIME) AS DAILY_EXECUTION_TIME_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_EXECUTION_TIME_USED) AVGDAILYEXECUTIONTIME, MIN(DAILY_EXECUTION_TIME_USED), MAX(DAILY_EXECUTION_TIME_USED) MAXDAILYEXECUTIONTIME
FROM DAILY_EXECUTION_TIME_BY_WH GROUP BY 1),
WAREHOUSES_MIN_MAX AS
(WITH DAILY_CREDITS_USED_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(CREDITS_USED_COMPUTE) AS DAILY_CREDITS_USED
FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_CREDITS_USED), MIN(DAILY_CREDITS_USED), IFF(MAX(DAILY_CREDITS_USED)=0,1,MAX(DAILY_CREDITS_USED)) MAXCREDITS
FROM DAILY_CREDITS_USED_BY_WH GROUP BY 1)
SELECT ?, 104 ACTION_ID
,encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('ALTER WAREHOUSE ' || MM.WAREHOUSE_NAME || ' SET STATEMENT_TIMEOUT_IN_SECONDS = 7200;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1,'' SQL_TEXT2
,'CREATED'
,(TIMEOUT_IN_SECONDS/(60*60) - AVGDAILYEXECUTIONTIME/(1000*60*60)) * NODES EST_DAILY_RISK_SAVINGS_CREDITS
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_NO_RM, WAREHOUSE_SIZE, WAREHOUSES_MIN_MAX MM, WAREHOUSES_AVG_EXECUTION_TIME
WHERE WAREHOUSES_NO_RM."name" = MM.WAREHOUSE_NAME AND MM.WAREHOUSE_NAME= WAREHOUSES_AVG_EXECUTION_TIME.WAREHOUSE_NAME
AND WAREHOUSE_SIZE = "size";`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 108, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 108, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_109()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER(RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT2,SQL_TEXT_STATUS
,EST_RISK_SAVINGS_CREDITS
,CREATED_DT)
WITH
WAREHOUSES_NO_RM AS
(
SELECT "name", "size", SUM(SAVINGS_SECONDS)/3600 HOUR_SAVINGS_OVER_MONTH
FROM
(SELECT QUERY_ID,"name","size",START_TIME, EXECUTION_TIME, END_TIME,TIMESTAMPADD(s,"auto_suspend",END_TIME) J,
ABS(60 - IFNULL("auto_suspend",0)) SAVINGS_SECONDS,
LAG(START_TIME) OVER (ORDER BY START_TIME) PREV_START_TIME,
LEAD(START_TIME) OVER (ORDER BY START_TIME) NEXT_START_TIME,
LAG(END_TIME) OVER (ORDER BY END_TIME) PREV_END_TIME,
LEAD(END_TIME) OVER (ORDER BY END_TIME) NEXT_END_TIME,
TIMESTAMPDIFF(s,J,  NEXT_START_TIME) DELTA,
TIMESTAMPDIFF(s,END_TIME,  NEXT_START_TIME)
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_INSTALL
JOIN  EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_INSTALL ON "name" = WAREHOUSE_NAME
WHERE WAREHOUSE_NAME IS NOT NULL
and to_date(start_time) >= dateadd(month,-1,CURRENT_TIMESTAMP())
ORDER BY WAREHOUSE_NAME,START_TIME)
WHERE DELTA > 0
AND SAVINGS_SECONDS > 0
GROUP BY "name","size"  
),
WAREHOUSE_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'Medium' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT '5X-Large' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT '6X-Large' AS WAREHOUSE_SIZE, 512 AS NODES)
),
WAREHOUSES_AVG_EXECUTION_TIME AS
(WITH DAILY_EXECUTION_TIME_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(TOTAL_ELAPSED_TIME) AS DAILY_EXECUTION_TIME_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_EXECUTION_TIME_USED) AVGDAILYEXECUTIONTIME, MIN(DAILY_EXECUTION_TIME_USED), MAX(DAILY_EXECUTION_TIME_USED) MAXDAILYEXECUTIONTIME
FROM DAILY_EXECUTION_TIME_BY_WH GROUP BY 1),
WAREHOUSES_MIN_MAX AS
(WITH DAILY_CREDITS_USED_BY_WH AS
(SELECT WAREHOUSE_NAME, TO_DATE(START_TIME) as DATE, SUM(CREDITS_USED_COMPUTE) AS DAILY_CREDITS_USED
FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP())
GROUP BY 1,2)
SELECT WAREHOUSE_NAME, AVG(DAILY_CREDITS_USED), MIN(DAILY_CREDITS_USED), IFF(MAX(DAILY_CREDITS_USED)=0,1,MAX(DAILY_CREDITS_USED)) MAXCREDITS
FROM DAILY_CREDITS_USED_BY_WH GROUP BY 1)
SELECT ?, 105 ACTION_ID
,encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('ALTER WAREHOUSE ' || MM.WAREHOUSE_NAME || ' SET AUTO_SUSPEND = 60;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1,'' SQL_TEXT2
,'CREATED'
,HOUR_SAVINGS_OVER_MONTH * NODES EST_DAILY_COST_SAVINGS_CREDITS
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_NO_RM, WAREHOUSE_SIZE, WAREHOUSES_MIN_MAX MM, WAREHOUSES_AVG_EXECUTION_TIME
WHERE "name" = MM.WAREHOUSE_NAME AND MM.WAREHOUSE_NAME=WAREHOUSES_AVG_EXECUTION_TIME.WAREHOUSE_NAME
AND WAREHOUSE_SIZE = "size";`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 109, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 109, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_110()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER(RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT2,SQL_TEXT_STATUS
,EST_RISK_SAVINGS_CREDITS
,CREATED_DT)
WITH WAREHOUSES_NO_AUTORESUME AS
(SELECT "name" AS WAREHOUSE_NAME, "size" AS WAREHOUSE_SIZE FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING 
 WHERE "auto_resume" = 'false' AND RUN_ID IN (SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING))
SELECT ?, 
106 ACTION_ID
,encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('ALTER WAREHOUSE ' || WAREHOUSE_NAME || ' SET AUTO_RESUME = TRUE;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1,'' SQL_TEXT2
,'CREATED'
,0 EST_DAILY_COST_SAVINGS_CREDITS
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_NO_AUTORESUME;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 110, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 110, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_212()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH DATABASES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" DATABASES_NAME,251 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_DATABASES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON DATABASES' || 'DATABASES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM DATABASES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 212, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 212, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_214()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH EXTERNAL_TABLES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" EXTERNAL_TABLES_NAME,253 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_TABLES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_EXTERNAL_TABLES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON EXTERNAL TABLES' || 'EXTERNAL_TABLES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM EXTERNAL_TABLES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 214, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 214, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_215()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH FILE_FORMATS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" FILE_FORMATS_NAME,254 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_FILE_FORMATS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_FILE_FORMATS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON FILE FORMATS' || 'FILE_FORMATS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM FILE_FORMATS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 215, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 215, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_217()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH MASKING_POLICIES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" MASKING_POLICIES_NAME,256 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MASKING_POLICIES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MASKING_POLICIES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON MASKING POLICIES' || 'MASKING_POLICIES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM MASKING_POLICIES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 217, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 217, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_218()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH MATERIALIZED_VIEWS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" MATERIALIZED_VIEWS_NAME,257 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEWS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEWS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON MATERIALIZED VIEWS' || 'MATERIALIZED_VIEWS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM MATERIALIZED_VIEWS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 218, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 218, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_220()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH PIPES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" PIPES_NAME,259 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON PIPES' || 'PIPES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM PIPES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 220, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 220, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_225()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH SCHEMAS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" SCHEMAS_NAME,264 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SCHEMAS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SCHEMAS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON SCHEMAS' || 'SCHEMAS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM SCHEMAS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 225, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 225, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_226()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH SEQUENCES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" SEQUENCES_NAME,265 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEQUENCES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEQUENCES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON SEQUENCES' || 'SEQUENCES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM SEQUENCES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 226, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 226, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_228()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH STAGES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" STAGES_NAME,267 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STAGES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON STAGES' || 'STAGES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM STAGES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 228, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 228, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_229()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH STREAMS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" STREAMS_NAME,268 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STREAMS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STREAMS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON STREAMS' || 'STREAMS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM STREAMS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 229, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 229, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_230()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH TABLES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" TABLES_NAME,269 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TABLES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TABLES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON TABLES' || 'TABLES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM TABLES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 230, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 230, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_231()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH TASKS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" TASKS_NAME,270 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASKS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_TASKS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON TASKS' || 'TASKS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM TASKS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 231, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 231, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_234()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH VIEWS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" VIEWS_NAME,273 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_VIEWS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_VIEWS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON VIEWS' || 'VIEWS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM VIEWS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 234, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 234, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_235()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH WAREHOUSES_OWNED_BY_AA AS
(SELECT RUN_ID,"name" WAREHOUSES_NAME,274 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON WAREHOUSES' || 'WAREHOUSES_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM WAREHOUSES_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 235, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 235, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.tests_proc_236()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
result = snowflake.execute({sqlText: "SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RUNS" });
result.next();
run_id = result.getColumnValue(1)

SQL_TEXT1=`INSERT INTO EXT_SNOPTIMIZER_SERVICES.SNOPTIMIZER (RUN_ID,ACTION_ID,EXT_SNOPT_ID,SQL_TEXT1,SQL_TEXT_STATUS,EST_SECURITY_RISK_LEVEL,CREATED_DT)
WITH RESOURCE_MONITORS_OWNED_BY_AA AS
(SELECT RUN_ID,"name" RESOURCE_MONITORS_NAME,275 ACTION_ID
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_ONGOING 
WHERE "owner"='ACCOUNTADMIN' AND RUN_ID=(SELECT MAX(RUN_ID) FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_RESOURCE_MONITORS_ONGOING))
SELECT RUN_ID, ACTION_ID, encrypt(lower(CURRENT_ACCOUNT()),ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') EXT_SNOPT_ID
,encrypt('GRANT OWNERSHIP ON RESOURCE MONITORS' || 'RESOURCE_MONITORS_NAME TO ROLE SYSADMIN;',ADMIN.PASS_KEY(CURRENT_ACCOUNT()),'***') SQL_TEXT1
,'CREATED' SQL_TEXT_STATUS
,'Warning - Object owned by ACCOUNTADMIN' EST_SECURITY_RISK_LEVEL
,CURRENT_TIMESTAMP()
FROM RESOURCE_MONITORS_OWNED_BY_AA
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1, binds: [run_id] });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 236, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 236, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_111()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_151 AS WITH WAREHOUSE_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'X-Small' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'Small' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'Medium' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'Large' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'X-Large' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT '2X-Large' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT '3X-Large' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT '4X-Large' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT '5X-Large' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT '6X-Large' AS WAREHOUSE_SIZE, 512 AS NODES         
))
SELECT QH.QUERY_ID
      ,'https://' || current_account() || '.snowflakecomputing.com/console#/monitoring/queries/detail?queryId='||QH.QUERY_ID AS QU
      ,LEFT(QH.QUERY_TEXT,100) QUERY_TEXTFIRST100
      ,QH.USER_NAME
      ,QH.ROLE_NAME
      ,QH.EXECUTION_TIME as EXECUTION_TIME_MILLISECONDS
      ,(QH.EXECUTION_TIME/(1000)) as EXECUTION_TIME_SECONDS
      ,(QH.EXECUTION_TIME/(1000*60)) AS EXECUTION_TIME_MINUTES
      ,(QH.EXECUTION_TIME/(1000*60*60)) AS EXECUTION_TIME_HOURS
      ,QH.WAREHOUSE_SIZE
      ,WS.NODES
      ,(QH.EXECUTION_TIME/(1000*60*60))*WS.NODES as RELATIVE_PERFORMANCE_COST
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING QH
JOIN WAREHOUSE_SIZE WS ON WS.WAREHOUSE_SIZE = QH.WAREHOUSE_SIZE
ORDER BY RELATIVE_PERFORMANCE_COST DESC
LIMIT 10;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 111, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 111, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_112()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_152 AS /*USERS BY CREDIT CONSUMPTION DESCENDING*/
SELECT USER_NAME, COUNT(1) QUERIES, 
       SUM(TOTAL_ELAPSED_TIME/1000 * 
       CASE WAREHOUSE_SIZE
       WHEN 'X-Small' THEN 1/60/60
       WHEN 'Small'   THEN 2/60/60
       WHEN 'Medium'  THEN 4/60/60
       WHEN 'Large'   THEN 8/60/60
       WHEN 'X-Large' THEN 16/60/60
       WHEN '2X-Large' THEN 32/60/60
       WHEN '3X-Large' THEN 64/60/60
       WHEN '4X-Large' THEN 128/60/60
       WHEN '5X-Large' THEN 256/60/60
       WHEN '6X-Large' THEN 512/60/60              
       ELSE 0
       END) AS ESTIMATED_CREDITS
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP()) 
GROUP BY USER_NAME
ORDER BY 3 DESC
LIMIT 10;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 112, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 112, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_114()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_123 AS WITH
CLOUD_SERVICES_CREDITS AS (SELECT
     WAREHOUSE_NAME, YEAR(START_TIME) || MONTH(START_TIME) MONTH,
     SUM(CREDITS_USED_CLOUD_SERVICES) AS CLOUD_SERVICES_CREDITS,
     COUNT(*) AS NO_QUERYS
     FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
     GROUP BY WAREHOUSE_NAME,MONTH
     ORDER BY WAREHOUSE_NAME,NO_QUERYS DESC),
WAREHOUSE_METERING AS (SELECT
     WAREHOUSE_NAME, YEAR(START_TIME) || MONTH(START_TIME) MONTH,
     SUM(CREDITS_USED) AS CREDITS_FOR_MONTH
     FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
     GROUP BY WAREHOUSE_NAME,MONTH
     ORDER BY WAREHOUSE_NAME,CREDITS_FOR_MONTH DESC)
SELECT *, TO_NUMERIC(CLOUD_SERVICES_CREDITS/NULLIF(CREDITS_FOR_MONTH,0)*100,10,2) AS PERCT_CLOUD
FROM CLOUD_SERVICES_CREDITS
JOIN WAREHOUSE_METERING USING(WAREHOUSE_NAME,MONTH)
WHERE PERCT_CLOUD > 10 and CLOUD_SERVICES_CREDITS > 1
ORDER BY PERCT_CLOUD DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 114, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 114, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_115()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_153 AS /* LONGEST RUNNING QUERIES */
SELECT USER_NAME,QUERY_TEXT,QUERY_ID,TOTAL_ELAPSED_TIME/1000 ELAPSED_TIME
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())
ORDER BY 4 DESC
LIMIT 10;
`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 115, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 115, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_116()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_154 AS /* CREDITS USED PER HOUR */
SELECT TO_CHAR(START_TIME,'HH24') AS HOUR, SUM(CREDITS_USED) CREDITS_USED
FROM SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY WMH 
WHERE START_TIME >= DATEADD(DAY, -60, CURRENT_TIMESTAMP()) 
GROUP BY TO_CHAR(START_TIME,'HH24') 
ORDER BY 1;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 116, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 116, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_117()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_0 AS SELECT 
  TO_DATE(LAST_LOAD_TIME) as LOAD_DATE
  ,STATUS
  ,TABLE_CATALOG_NAME as DATABASE_NAME
  ,TABLE_SCHEMA_NAME as SCHEMA_NAME
  ,TABLE_NAME
  ,CASE WHEN PIPE_NAME IS NULL THEN 'COPY' ELSE 'SNOWPIPE' END AS INGEST_METHOD
  ,SUM(ROW_COUNT) as ROW_COUNT
  ,SUM(ROW_PARSED) as ROWS_PARSED
  ,AVG(FILE_SIZE) as AVG_FILE_SIZE_BYTES
  ,SUM(FILE_SIZE) as TOTAL_FILE_SIZE_BYTES
  ,SUM(FILE_SIZE)/POWER(1024,1) as TOTAL_FILE_SIZE_KB
  ,SUM(FILE_SIZE)/POWER(1024,2) as TOTAL_FILE_SIZE_MB
  ,SUM(FILE_SIZE)/POWER(1024,3) as TOTAL_FILE_SIZE_GB
  ,SUM(FILE_SIZE)/POWER(1024,4) as TOTAL_FILE_SIZE_TB
FROM SNOWFLAKE.ACCOUNT_USAGE.COPY_HISTORY
GROUP BY 1,2,3,4,5,6
ORDER BY 3,4,5,1,2
;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 117, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 117, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_118()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_111 AS 
WITH CREDITS_BY_DAY AS 
(SELECT TO_DATE(START_TIME) DATE
,SUM(CREDITS_USED) CREDITS_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_AUTOMATIC_CLUSTERING_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY,-30, CURRENT_TIMESTAMP())
GROUP BY DATE 
ORDER BY CREDITS_USED DESC)
SELECT DATE, AVG(CREDITS_USED) AVG_DAILY_CREDITS
FROM CREDITS_BY_DAY
GROUP BY DATE
ORDER BY DATE;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 118, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 118, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_119()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_113 AS 
WITH CREDITS_BY_DAY AS 
(SELECT TO_DATE(START_TIME) DATE
,SUM(CREDITS_USED) CREDITS_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_MATERIALIZED_VIEW_REFRESH_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY,-30, CURRENT_TIMESTAMP())
GROUP BY DATE 
ORDER BY CREDITS_USED DESC)
SELECT DATE, AVG(CREDITS_USED) AVG_DAILY_CREDITS
FROM CREDITS_BY_DAY
GROUP BY DATE
ORDER BY DATE;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 119, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 119, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_120()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_115 AS
WITH CREDITS_BY_DAY AS 
(SELECT TO_DATE(START_TIME) DATE
,SUM(CREDITS_USED) CREDITS_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_SEARCH_OPTIMIZATION_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY,-30, CURRENT_TIMESTAMP())
GROUP BY DATE 
ORDER BY CREDITS_USED DESC)
SELECT DATE, AVG(CREDITS_USED) AVG_DAILY_CREDITS
FROM CREDITS_BY_DAY
GROUP BY DATE
ORDER BY DATE;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 120, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 120, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_121()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_117 AS
WITH CREDITS_BY_DAY AS 
(SELECT TO_DATE(START_TIME) DATE
,SUM(CREDITS_USED) CREDITS_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_PIPE_USAGE_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY,-30, CURRENT_TIMESTAMP())
GROUP BY DATE 
ORDER BY CREDITS_USED DESC)
SELECT DATE, AVG(CREDITS_USED) AVG_DAILY_CREDITS
FROM CREDITS_BY_DAY
GROUP BY DATE
ORDER BY DATE;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 121, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 121, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_122()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_119 AS 
WITH CREDITS_BY_DAY AS 
(SELECT TO_DATE(START_TIME) DATE
,SUM(CREDITS_USED) CREDITS_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY,-30, CURRENT_TIMESTAMP())
GROUP BY DATE 
ORDER BY CREDITS_USED DESC)
SELECT DATE, AVG(CREDITS_USED) AVG_DAILY_CREDITS
FROM CREDITS_BY_DAY
GROUP BY DATE
ORDER BY DATE;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 122, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 122, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_123()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_121 AS 
WITH CREDITS_BY_DAY AS 
(SELECT TO_DATE(START_TIME) DATE
,SUM(CREDITS_USED) CREDITS_USED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_REPLICATION_USAGE_HISTORY_ONGOING
WHERE START_TIME >= DATEADD(DAY,-30, CURRENT_TIMESTAMP())
GROUP BY DATE 
ORDER BY CREDITS_USED DESC)
SELECT DATE, AVG(CREDITS_USED) AVG_DAILY_CREDITS
FROM CREDITS_BY_DAY
GROUP BY DATE
ORDER BY DATE;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 123, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 123, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_124()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_130 AS
SELECT USAGE_DATE
,STORAGE_BYTES /1073741824 STORAGE_DATABASE
,STAGE_BYTES /1073741824 STORAGE_STAGE
,FAILSAFE_BYTES /1073741824 STORAGE_FAILSAFE
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_STORAGE_USAGE_ONGOING
WHERE USAGE_DATE >= DATEADD('DAYS', -45, CURRENT_DATE());`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 124, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 124, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_125()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOPTIMIZER_132 AS SELECT 
DATE_TRUNC('MONTH', USAGE_DATE) AS MONTH,
DATABASE_NAME,
TO_DECIMAL(SUM(AVERAGE_DATABASE_BYTES)/ 1073741824,10,3) STORAGE_DATABASE
FROM SNOWFLAKE.ACCOUNT_USAGE.DATABASE_STORAGE_USAGE_HISTORY
WHERE USAGE_DATE >= DATEADD('MONTHS', -2, CURRENT_DATE())
GROUP BY MONTH, DATABASE_NAME
ORDER BY DATABASE_NAME, MONTH DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 125, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 125, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_137()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE SNOPT_CREDITS_USED_YESTERDAY AS
SELECT SUM(CREDITS_USED) CREDITS_USED_YESTERDAY_ FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_ONGOING
WHERE WAREHOUSE_NAME='EXT_SNOPTIMIZER_WH'
AND TO_DATE(START_TIME) = DATEADD(DAY,-1,CURRENT_DATE());`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 137, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 137, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_202()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_0 AS 
SELECT DISTINCT CLIENT_IP BLOCKED_SOURCE_IP, COUNT(CLIENT_IP) COUNT_CLIENT_IP, USER_NAME,
REPORTED_CLIENT_TYPE AS DRIVER,
FIRST_AUTHENTICATION_FACTOR AS AUTHN_TYPE
FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY
WHERE ERROR_MESSAGE = 'INCOMING_IP_BLOCKED' AND EVENT_TIMESTAMP > DATEADD(DAY,-30,CURRENT_TIMESTAMP)
GROUP BY USER_NAME, CLIENT_IP, REPORTED_CLIENT_TYPE,FIRST_AUTHENTICATION_FACTOR
ORDER BY COUNT (CLIENT_IP) DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 202, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 202, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_203()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_291 AS SELECT SSO.*, EVENT_TIMESTAMP, USER_NAME, FIRST_AUTHENTICATION_FACTOR,
SECOND_AUTHENTICATION_FACTOR, CLIENT_IP, REPORTED_CLIENT_TYPE
REPORTED_CLIENT_VERSION
FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY L
JOIN (SELECT USER_NAME USER_HAS_USED_SSO, MIN(EVENT_TIMESTAMP) FIRSTSSO
FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY
WHERE FIRST_AUTHENTICATION_FACTOR IN ('SAML2_ASSERTION','OAUTH_ACCESS_TOKEN')
GROUP BY USER_NAME) SSO ON SSO.USER_HAS_USED_SSO = L.USER_NAME
WHERE FIRST_AUTHENTICATION_FACTOR NOT IN ('SAML2_ASSERTION','OAUTH_ACCESS_TOKEN') 
AND L.EVENT_TIMESTAMP > FIRSTSSO
AND L.EVENT_TIMESTAMP > DATEADD(DAY,-30,CURRENT_TIMESTAMP)
ORDER BY L.EVENT_TIMESTAMP DESC LIMIT 10;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 203, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 203, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_205()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_202 AS SELECT DISTINCT USER_NAME, COUNT(USER_NAME) COUNT_USER_NAME, FIRST_AUTHENTICATION_FACTOR
FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY
WHERE IS_SUCCESS = 'YES' AND EVENT_TIMESTAMP > DATEADD(DAY,-30,CURRENT_TIMESTAMP)
GROUP BY USER_NAME, FIRST_AUTHENTICATION_FACTOR
ORDER BY COUNT( USER_NAME) DESC
LIMIT 10;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 205, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 205, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_206()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_283 AS 
SELECT DISTINCT CLIENT_IP,
COUNT(CLIENT_IP) COUNT_CLIENT_IP
FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY
WHERE IS_SUCCESS='NO' AND EVENT_TIMESTAMP > DATEADD(DAY,-30,CURRENT_TIMESTAMP)
GROUP BY CLIENT_IP
ORDER BY COUNT(CLIENT_IP) DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 206, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 206, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_207()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_292 AS SELECT DISTINCT USER_NAME, COUNT(USER_NAME) COUNT_USER_NAME, FIRST_AUTHENTICATION_FACTOR
FROM SNOWFLAKE.ACCOUNT_USAGE.LOGIN_HISTORY
WHERE IS_SUCCESS='NO' AND EVENT_TIMESTAMP > DATEADD(DAY,-30,CURRENT_TIMESTAMP)
GROUP BY USER_NAME, FIRST_AUTHENTICATION_FACTOR
ORDER BY COUNT( USER_NAME) DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 207, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 207, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_238()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_212 AS SELECT *,
SUM(S_COUNT) OVER (PARTITION BY EXECUTION_STATUS ORDER BY DATE) AS METRIC_SUMMABLE_RUNNING_TOTAL
FROM 
(SELECT TO_DATE(START_TIME) DATE, EXECUTION_STATUS, COUNT(*) S_COUNT
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE TO_DATE(START_TIME) > DATEADD(DAY,-7,CURRENT_DATE())
GROUP BY TO_DATE(START_TIME), EXECUTION_STATUS
ORDER BY TO_DATE(START_TIME), EXECUTION_STATUS);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 238, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 238, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_239()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_SNOSECURE_210 AS SELECT EXECUTION_STATUS, COUNT(*) STATUS_COUNT
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE TO_DATE(START_TIME) = CURRENT_DATE()-1
GROUP BY EXECUTION_STATUS;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 239, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 239, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_240()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';
SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.EXAMPLE_PCT_FAIL_CHANGE AS WITH QH_FAIL_COUNT AS
(SELECT TO_DATE(START_TIME) DATE, COUNT(*) FAIL_COUNT
FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE TO_DATE(START_TIME) BETWEEN DATEADD(DAY,-2,CURRENT_DATE())  AND DATEADD(DAY,-1,CURRENT_DATE())
AND EXECUTION_STATUS='FAIL'
GROUP BY TO_DATE(START_TIME) 
ORDER BY TO_DATE(START_TIME))
,QH_LAG AS 
(SELECT *,
LAG(FAIL_COUNT) OVER(ORDER BY DATE) AS PREVIOUS_DAY_FAIL_COUNT
FROM QH_FAIL_COUNT)
SELECT *,
COALESCE(ROUND((FAIL_COUNT - PREVIOUS_DAY_FAIL_COUNT)/PREVIOUS_DAY_FAIL_COUNT *100),0) AS PCT_CHANGE
FROM QH_LAG;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 240, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 240, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer REPORT Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_303()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.POPT_303 
COMMENT='Optimizing Something'AS
SELECT TO_DATE(START_TIME) as DATE
,WAREHOUSE_NAME
,SUM(AVG_RUNNING) AS SUM_RUNNING
,SUM(AVG_QUEUED_LOAD) AS SUM_QUEUED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_ONGOING
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())
GROUP BY 1,2
HAVING SUM(AVG_QUEUED_LOAD) >0;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 303, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 303, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_304()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_POPT_304
COMMENT='Optimizing Warehouses - Cache Usage Report -- 30 days---LIST OF WAREHOUSES AND DAYS WHERE MCW COULD HAVE HELPED'
AS SELECT WAREHOUSE_NAME, COUNT(*) AS QUERY_COUNT
,SUM(BYTES_SCANNED) AS BYTES_SCANNED
,SUM(BYTES_SCANNED*PERCENTAGE_SCANNED_FROM_CACHE) AS BYTES_SCANNED_FROM_CACHE
,SUM(BYTES_SCANNED*PERCENTAGE_SCANNED_FROM_CACHE) / SUM(BYTES_SCANNED) AS PERCENT_SCANNED_FROM_CACHE
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())
AND BYTES_SCANNED > 0
GROUP BY 1
ORDER BY 5;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 304, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 304, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_305()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_POPT_305
COMMENT='Optimizing Warehouses - Heavy Scanner Report - 30 days' 
AS SELECT USER_NAME,WAREHOUSE_NAME
,AVG(CASE WHEN PARTITIONS_TOTAL > 0 THEN PARTITIONS_SCANNED / PARTITIONS_TOTAL ELSE 0 END) AVG_PCT_SCANNED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())
GROUP BY 1, 2
ORDER BY 3 DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 305, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 305, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_306()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_POPT_306
COMMENT='/*Optimizing Warehouses - Users with near Table Scans Reports 1 and 2 - 30 days */' 
AS SELECT USER_NAME, COUNT(*) AS COUNT_OF_QUERIES
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())
AND PARTITIONS_SCANNED > (PARTITIONS_TOTAL*0.95)
AND QUERY_TYPE NOT LIKE 'CREATE%'
GROUP BY 1
ORDER BY 2 DESC;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 306, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 306, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_307()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_POPT_307
COMMENT='missing?'
AS SELECT * 
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())
AND PARTITIONS_SCANNED > (PARTITIONS_TOTAL*0.95)
AND QUERY_TYPE NOT LIKE 'CREATE%'
ORDER BY PARTITIONS_SCANNED DESC
LIMIT 10;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 307, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 307, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.reports_proc_308()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.REPORTS_POPT_308
COMMENT='/*Optimizing Warehouses - Top 10 Remote Spillers - 30 days*/'
AS 
SELECT QUERY_ID, SUBSTR(QUERY_TEXT, 1, 50) PARTIAL_QUERY_TEXT, USER_NAME, WAREHOUSE_NAME, WAREHOUSE_SIZE, 
BYTES_SPILLED_TO_REMOTE_STORAGE, START_TIME, END_TIME, TOTAL_ELAPSED_TIME/1000 TOTAL_ELAPSED_TIME
FROM   SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE START_TIME >= DATEADD('DAYS', -30, CURRENT_TIMESTAMP())  
AND BYTES_SPILLED_TO_REMOTE_STORAGE > 0
ORDER  BY BYTES_SPILLED_TO_REMOTE_STORAGE DESC
LIMIT 10;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 308, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 308, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer TESTS Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE TABLE CONFIG.INSTALLATION_STATUS
AS
SELECT
    'PRE-INSTALLED'     AS status,
    current_timestamp   AS installed_at;
GRANT SELECT, UPDATE ON TABLE CONFIG.INSTALLATION_STATUS TO APPLICATION ROLE APP_PUBLIC;


CREATE OR REPLACE PROCEDURE config.update_installation_status()
RETURNS VARCHAR
LANGUAGE SQL
AS
$$
BEGIN
    UPDATE config.installation_status SET status = 'INSTALLED';
    -- Print the summary
    RETURN 'Success';
END;
$$;

GRANT USAGE ON PROCEDURE config.update_installation_status() TO APPLICATION ROLE app_public;



CREATE OR REPLACE PROCEDURE private.install()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS 
$$
    error = ''
    message = ''
        try{
            snowflake.execute({sqlText: "call private.install_proc_3()"  });
            snowflake.execute({sqlText: "call private.install_proc_4()"  });
            snowflake.execute({sqlText: "call private.install_proc_5()"  });
            snowflake.execute({sqlText: "call private.install_proc_6()"  });
            snowflake.execute({sqlText: "call private.install_proc_7()"  });
            snowflake.execute({sqlText: "call private.install_proc_8()"  });
            snowflake.execute({sqlText: "call private.install_proc_9()"  });
            snowflake.execute({sqlText: "call private.install_proc_10()"  });
            snowflake.execute({sqlText: "call private.install_proc_11()"  });
            snowflake.execute({sqlText: "call private.install_proc_12()"  });
            snowflake.execute({sqlText: "call private.install_proc_13()"  });
            snowflake.execute({sqlText: "call private.install_proc_14()"  });
            snowflake.execute({sqlText: "call private.install_proc_15()"  });
            snowflake.execute({sqlText: "call private.install_proc_16()"  });
            snowflake.execute({sqlText: "call private.install_proc_17()"  });
            snowflake.execute({sqlText: "call private.install_proc_18()"  });
            snowflake.execute({sqlText: "call private.install_proc_19()"  });
            snowflake.execute({sqlText: "call private.install_proc_20()"  });
            snowflake.execute({sqlText: "call private.install_proc_21()"  });
            snowflake.execute({sqlText: "call private.install_proc_22()"  });
            snowflake.execute({sqlText: "call private.install_proc_23()"  });
            snowflake.execute({sqlText: "call private.install_proc_24()"  });
            snowflake.execute({sqlText: "call private.install_proc_25()"  });
            snowflake.execute({sqlText: "call private.install_proc_26()"  });
            snowflake.execute({sqlText: "call private.install_proc_27()"  });
            snowflake.execute({sqlText: "call private.install_proc_29()"  });
            snowflake.execute({sqlText: "call private.install_proc_30()"  });
            snowflake.execute({sqlText: "call private.install_proc_32()"  });
            snowflake.execute({sqlText: "call private.install_proc_33()"  });
            snowflake.execute({sqlText: "call private.install_proc_35()"  });
            snowflake.execute({sqlText: "call private.install_proc_37()"  });
            snowflake.execute({sqlText: "call private.install_proc_38()"  });
            snowflake.execute({sqlText: "call private.install_proc_40()"  });
            snowflake.execute({sqlText: "call private.install_proc_41()"  });
            snowflake.execute({sqlText: "call private.install_proc_42()"  });
            snowflake.execute({sqlText: "call private.install_proc_43()"  });
            snowflake.execute({sqlText: "call private.install_proc_44()"  });
            snowflake.execute({sqlText: "call private.install_proc_46()"  });
            snowflake.execute({sqlText: "call private.install_proc_47()"  });
            snowflake.execute({sqlText: "call private.install_proc_48()"  });
            snowflake.execute({sqlText: "call private.install_proc_51()"  });
            snowflake.execute({sqlText: "call private.install_proc_52()"  });
            snowflake.execute({sqlText: "call private.install_proc_102()"  });
            snowflake.execute({sqlText: "call private.install_proc_127()"  });
            snowflake.execute({sqlText: "call private.install_proc_138()"  });
            snowflake.execute({sqlText: "call private.install_proc_142()"  });
            snowflake.execute({sqlText: "call private.assess_proc_138()" });
            snowflake.execute({sqlText: "call private.assess_proc_142()" });
            message = message + '\n' +  "Success";
        }
        catch (err){
            error = error + "ERROR: " + err; 
        }

    message = 'Message: ' + message;
    message = message + '\n' + 'Error: ' + error;
    return message;
$$;


CREATE OR REPLACE PROCEDURE private.recurring_run()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS 
$$
    error = ''
    message = ''
        try{
            snowflake.execute({sqlText: "call private.recurring_run_proc_53()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_54()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_55()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_56()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_57()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_58()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_59()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_60()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_61()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_62()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_63()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_64()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_65()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_66()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_67()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_68()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_69()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_70()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_71()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_72()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_73()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_74()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_75()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_76()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_77()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_78()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_80()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_81()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_83()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_84()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_86()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_88()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_89()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_91()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_92()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_93()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_94()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_95()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_97()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_98()"  });
            snowflake.execute({sqlText: "call private.recurring_run_proc_99()"  });
            message = message + '\n' +  "Success";
        }
        catch (err){
            error = error + "ERROR: " + err; 
        }

    message = 'Message: ' + message;
    message = message + '\n' + 'Error: ' + error;
    return message;
$$;

CREATE OR REPLACE PROCEDURE private.tests()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
    error = ''
    message = ''
        try{
            snowflake.execute({sqlText: "call private.tests_proc_103()"  });
            snowflake.execute({sqlText: "call private.tests_proc_104()"  });
            snowflake.execute({sqlText: "call private.tests_proc_105()"  });
            snowflake.execute({sqlText: "call private.tests_proc_108()"  });
            snowflake.execute({sqlText: "call private.tests_proc_109()"  });
            snowflake.execute({sqlText: "call private.tests_proc_110()"  });
            snowflake.execute({sqlText: "call private.tests_proc_212()"  });
            snowflake.execute({sqlText: "call private.tests_proc_214()"  });
            snowflake.execute({sqlText: "call private.tests_proc_215()"  });
            snowflake.execute({sqlText: "call private.tests_proc_217()"  });
            snowflake.execute({sqlText: "call private.tests_proc_218()"  });
            snowflake.execute({sqlText: "call private.tests_proc_220()"  });
            snowflake.execute({sqlText: "call private.tests_proc_225()"  });
            snowflake.execute({sqlText: "call private.tests_proc_226()"  });
            snowflake.execute({sqlText: "call private.tests_proc_228()"  });
            snowflake.execute({sqlText: "call private.tests_proc_229()"  });
            snowflake.execute({sqlText: "call private.tests_proc_230()"  });
            snowflake.execute({sqlText: "call private.tests_proc_231()"  });
            snowflake.execute({sqlText: "call private.tests_proc_234()"  });
            snowflake.execute({sqlText: "call private.tests_proc_235()"  });
            snowflake.execute({sqlText: "call private.tests_proc_236()"  });
            message = message + '\n' +  "Success";
        }
        catch (err){
            error = error + "ERROR: " + err;
        }
    message = 'Message: ' + message;
    message = message + '\n' + 'Error: ' + error;
    return message;
$$;

CREATE OR REPLACE PROCEDURE private.reports()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
    error = ''
    message = ''
        try{
            snowflake.execute({sqlText: "call private.reports_proc_111()"  });
            snowflake.execute({sqlText: "call private.reports_proc_112()"  });
            snowflake.execute({sqlText: "call private.reports_proc_114()"  });
            snowflake.execute({sqlText: "call private.reports_proc_115()"  });
            snowflake.execute({sqlText: "call private.reports_proc_116()"  });
            snowflake.execute({sqlText: "call private.reports_proc_117()"  });
            snowflake.execute({sqlText: "call private.reports_proc_118()"  });
            snowflake.execute({sqlText: "call private.reports_proc_119()"  });
            snowflake.execute({sqlText: "call private.reports_proc_120()"  });
            snowflake.execute({sqlText: "call private.reports_proc_121()"  });
            snowflake.execute({sqlText: "call private.reports_proc_122()"  });
            snowflake.execute({sqlText: "call private.reports_proc_123()"  });
            snowflake.execute({sqlText: "call private.reports_proc_124()"  });
            snowflake.execute({sqlText: "call private.reports_proc_125()"  });
            snowflake.execute({sqlText: "call private.reports_proc_137()"  });
            snowflake.execute({sqlText: "call private.reports_proc_202()"  });
            snowflake.execute({sqlText: "call private.reports_proc_203()"  });
            snowflake.execute({sqlText: "call private.reports_proc_205()"  });
            snowflake.execute({sqlText: "call private.reports_proc_206()"  });
            snowflake.execute({sqlText: "call private.reports_proc_207()"  });
            snowflake.execute({sqlText: "call private.reports_proc_238()"  });
            snowflake.execute({sqlText: "call private.reports_proc_239()"  });
            snowflake.execute({sqlText: "call private.reports_proc_240()"  });
            snowflake.execute({sqlText: "call private.reports_proc_303()"  });
            snowflake.execute({sqlText: "call private.reports_proc_304()"  });
            snowflake.execute({sqlText: "call private.reports_proc_305()"  });
            snowflake.execute({sqlText: "call private.reports_proc_306()"  });
            snowflake.execute({sqlText: "call private.reports_proc_307()"  });
            snowflake.execute({sqlText: "call private.reports_proc_308()"  });
            message = message + '\n' +  "Success";
        }
        catch (err){
            error = error + "ERROR: " + err;
        }
    message = 'Message: ' + message;
    message = message + '\n' + 'Error: ' + error;
    return message;
$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_01()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_DATE_FILTER(DATE_COLUMN DATE NOT NULL)
AS
WITH CTE_DATES AS 
(SELECT DATEADD(DAY, -SEQ4(), CURRENT_DATE-1) DATE_COLUMN
FROM TABLE(GENERATOR(ROWCOUNT => 10))
ORDER BY DATE_COLUMN)
SELECT * FROM CTE_DATES;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 01, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 01, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_03()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_SNOPTIMIZER_OBJS_TRACKED AS 
SELECT 'COLUMNS' OBJECT_NAME,'COLUMNS' SHOW_COMMAND,'N' TRACK,'SELECT' SQL_PATTERN UNION 
SELECT 'CONNECTIONS' OBJECT_NAME,'CONNECTIONS' SHOW_COMMAND,'N' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'DATABASES' OBJECT_NAME,'DATABASES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'EXTERNAL FUNCTIONS' OBJECT_NAME,'EXTERNAL FUNCTIONS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'EXTERNAL TABLES' OBJECT_NAME,'EXTERNAL TABLES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'FILE FORMATS' OBJECT_NAME,'FILE FORMATS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'GLOBAL ACCOUNTS' OBJECT_NAME,'GLOBAL ACCOUNTS' SHOW_COMMAND,'N' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'GRANTS' OBJECT_NAME,'GRANTS' SHOW_COMMAND,'N' TRACK,'SELECT' SQL_PATTERN UNION 
SELECT 'INTEGRATIONS' OBJECT_NAME,'INTEGRATIONS' SHOW_COMMAND,'Y' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'LOCKS' OBJECT_NAME,'LOCKS' SHOW_COMMAND,'N' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'MASKING POLICIES' OBJECT_NAME,'MASKING POLICIES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'MATERIALIZED VIEWS' OBJECT_NAME,'MATERIALIZED VIEWS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'NETWORK POLICIES' OBJECT_NAME,'NETWORK POLICIES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'OBJECTS' OBJECT_NAME,'OBJECTS' SHOW_COMMAND,'N' TRACK,'SELECT' SQL_PATTERN UNION 
SELECT 'PARAMETERS' OBJECT_NAME,'PARAMETERS' SHOW_COMMAND,'N' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'PIPES' OBJECT_NAME,'PIPES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'PROCEDURES' OBJECT_NAME,'PROCEDURES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'REGIONS' OBJECT_NAME,'REGIONS' SHOW_COMMAND,'Y' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'REPLICATION ACCOUNTS' OBJECT_NAME,'REPLICATION ACCOUNTS' SHOW_COMMAND,'Y' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'REPLICATION DATABASES' OBJECT_NAME,'REPLICATION DATABASES' SHOW_COMMAND,'Y' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'RESOURCE MONITORS' OBJECT_NAME,'RESOURCE MONITORS' SHOW_COMMAND,'Y' TRACK,'SHOW AND CREATE TABLE' SQL_PATTERN UNION 
SELECT 'ROLES' OBJECT_NAME,'ROLES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'ROW ACCESS POLICIES' OBJECT_NAME,'ROW ACCESS POLICIES' SHOW_COMMAND,'N' TRACK,'SELECT' SQL_PATTERN UNION 
SELECT 'SCHEMATA' OBJECT_NAME,'SCHEMATA' SHOW_COMMAND,'Y' TRACK,'SELECT' SQL_PATTERN UNION 
SELECT 'SEQUENCES' OBJECT_NAME,'SEQUENCES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'SHARES' OBJECT_NAME,'SHARES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'STAGES' OBJECT_NAME,'STAGES' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'STREAMS' OBJECT_NAME,'STREAMS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'TABLES' OBJECT_NAME,'TABLES' SHOW_COMMAND,'Y' TRACK,'SELECT' SQL_PATTERN UNION 
SELECT 'TAGS' OBJECT_NAME,'TAGS' SHOW_COMMAND,'N' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'TASKS' OBJECT_NAME,'TASKS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'TRANSACTIONS' OBJECT_NAME,'TRANSACTIONS' SHOW_COMMAND,'N' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'USER FUNCTIONS' OBJECT_NAME,'USER FUNCTIONS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'USERS' OBJECT_NAME,'USERS' SHOW_COMMAND,'Y' TRACK,'SHOW IN ACCOUNT' SQL_PATTERN UNION 
SELECT 'VARIABLES' OBJECT_NAME,'VARIABLES' SHOW_COMMAND,'N' TRACK,'SHOW' SQL_PATTERN UNION 
SELECT 'VIEWS' OBJECT_NAME,'VIEWS' SHOW_COMMAND,'Y' TRACK,'SELECT' SQL_PATTERN UNION
SELECT 'WAREHOUSES' OBJECT_NAME,'WAREHOUSES' SHOW_COMMAND,'Y' TRACK,'SHOW AND CREATE TABLE' SQL_PATTERN; `;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 03, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 03, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_04()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_EXT_SNOPT_WH_SIZE AS
(SELECT WAREHOUSE_SIZE, NODES FROM (
      SELECT 'XSMALL' AS WAREHOUSE_SIZE, 1 AS NODES UNION ALL
      SELECT 'SMALL' AS WAREHOUSE_SIZE, 2 AS NODES UNION ALL
      SELECT 'MEDIUM' AS WAREHOUSE_SIZE, 4 AS NODES UNION ALL
      SELECT 'LARGE' AS WAREHOUSE_SIZE, 8 AS NODES UNION ALL
      SELECT 'XLARGE' AS WAREHOUSE_SIZE, 16 AS NODES UNION ALL
      SELECT 'X2LARGE' AS WAREHOUSE_SIZE, 32 AS NODES UNION ALL
      SELECT 'X3LARGE' AS WAREHOUSE_SIZE, 64 AS NODES UNION ALL
      SELECT 'X4LARGE' AS WAREHOUSE_SIZE, 128 AS NODES UNION ALL
      SELECT 'X5LARGE' AS WAREHOUSE_SIZE, 256 AS NODES UNION ALL
      SELECT 'X6LARGE' AS WAREHOUSE_SIZE, 512 AS NODES)
);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 04, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 04, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_05()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_QH_TS AS
SELECT * 
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
WHERE WAREHOUSE_NAME IS NOT NULL AND DATE_TRUNC(DAY,START_TIME) BETWEEN
DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE());`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 05, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 05, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_06()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_QH_WH_START_STOP AS
SELECT WAREHOUSE_NAME
,WAREHOUSE_START_TIME
,WAREHOUSE_END_TIME_ACTUAL
,((EXEC_TIME + 60000)/1000)/3600 *2 SOME_DAMN_CALC
,timediff(SECONDS,WAREHOUSE_START_TIME,WAREHOUSE_END_TIME) BEFOREAS
,timediff(SECONDS,WAREHOUSE_START_TIME,WAREHOUSE_END_TIME_ACTUAL) WITHAS
,WITHAS/3600 * 2 WITHASV2
FROM
(SELECT WAREHOUSE_NAME, WAREHOUSE_ID,GROUPID
,MIN(START_TIME) WAREHOUSE_START_TIME
,MAX(END_TIME) WAREHOUSE_END_TIME
,MAX(END_TIME_ACTUAL) AS WAREHOUSE_END_TIME_ACTUAL
,SUM(EXECUTION_TIME) EXEC_TIME
FROM
    (
    SELECT
        *,
        CASE WHEN TIMESTAMPDIFF(MILLISECONDS,G.END_TIME_ACTUAL,G.NEXT_START_TIME1) < 0 
                    OR TIMESTAMPDIFF(MILLISECONDS,G.PREV_END_TIME1,G.START_TIME) > 0 
        THEN 0 ELSE 1 END AS INDICATOR,
        SUM(CASE WHEN TIMESTAMPDIFF(MILLISECONDS,G.END_TIME_ACTUAL,G.NEXT_START_TIME1) > 0 
            OR TIMESTAMPDIFF(MILLISECONDS,G.PREV_END_TIME1,G.START_TIME) < 0 THEN 0 ELSE 1 END)
        OVER (ORDER BY G.RN) AS GROUPID
    FROM
    (
SELECT WAREHOUSE_NAME,WAREHOUSE_ID
,ROW_NUMBER() OVER(ORDER BY WAREHOUSE_NAME, START_TIME,END_TIME) AS RN
,START_TIME
,END_TIME
,EXECUTION_TIME
,TIMESTAMPADD(SECONDS,"auto_suspend",END_TIME) END_TIME_ACTUAL
,LAG(END_TIME_ACTUAL,1) OVER (PARTITION BY WAREHOUSE_NAME, WAREHOUSE_ID ORDER BY START_TIME, END_TIME) AS PREV_END_TIME1       
,LEAD(START_TIME,1) OVER (PARTITION BY WAREHOUSE_NAME, WAREHOUSE_ID ORDER BY START_TIME, END_TIME) AS NEXT_START_TIME1
,TIMESTAMPDIFF(MILLISECONDS,END_TIME_ACTUAL,NEXT_START_TIME1) CHECK_DIFF        
FROM  EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_QUERY_HISTORY_ONGOING
JOIN EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING ON WAREHOUSE_NAME="name"
WHERE DATE_TRUNC(DAY,START_TIME) = CURRENT_DATE()-1
//AND WAREHOUSE_NAME = 'FIVETRAN_WAREHOUSE'
AND WAREHOUSE_SIZE IS NOT NULL
ORDER BY WAREHOUSE_NAME, START_TIME, END_TIME
    ) G      
) GROUPIT
GROUP BY WAREHOUSE_NAME, WAREHOUSE_ID, GROUPID
ORDER BY WAREHOUSE_NAME, WAREHOUSE_START_TIME
);`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 06, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 06, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_07()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_QH_BY_DAY AS
SELECT 
WAREHOUSE_NAME
,WAREHOUSE_ID
,DATE_TRUNC('DAY',START_TIME) START_TIME_DATE
,DATE_TRUNC('DAY',END_TIME) END_TIME_DATE
,COUNT(*) QUERY_COUNT_DAILY
,AVG(COMPILATION_TIME) AVG_COMPILATION_TIME_DAILY
,AVG(EXECUTION_TIME) AVG_EXECUTION_TIME_DAILY
,AVG(QUEUED_PROVISIONING_TIME) AVG_QUEUED_PROVISIONING_TIME_DAILY
,AVG(QUEUED_REPAIR_TIME) AVG_QUEUED_REPAIR_TIME_DAILY
,AVG(QUEUED_OVERLOAD_TIME) AVG_QUEUED_OVERLOAD_TIME_DAILY
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_QH_TS /* filtered already by date range */
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 07, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 07, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_08()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_QH_BY_DAYHOUR AS
SELECT 
WAREHOUSE_NAME
,WAREHOUSE_ID
,DATE_TRUNC('DAY',START_TIME) START_TIME_DATE
,DATE_TRUNC('DAY',END_TIME) END_TIME_DATE
,DATE_TRUNC('HOUR',START_TIME) START_TIME_HOUR_FULL
,DATE_TRUNC('HOUR',END_TIME) END_TIME_HOUR_FULL
,COUNT(*) QUERY_COUNT_BY_DAYHOUR
,AVG(COMPILATION_TIME) AVG_COMPILATION_TIME_BY_DAYHOUR
,AVG(EXECUTION_TIME) AVG_EXECUTION_TIME_BYHOUR
,AVG(QUEUED_PROVISIONING_TIME) AVG_QUEUED_PROVISIONING_TIME_BY_DAYHOUR
,AVG(QUEUED_REPAIR_TIME) AVG_QUEUED_REPAIR_TIME_BY_DAYHOUR
,AVG(QUEUED_OVERLOAD_TIME) AVG_QUEUED_OVERLOAD_TIME_BY_DAYHOUR
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_QH_TS /* filtered already by date range */
GROUP BY 1,2,3,4,5,6
ORDER BY 1,2,3,4,5,6;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 08, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 08, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_09()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHE_TS AS 
SELECT
WAREHOUSE_NAME
,WAREHOUSE_ID
,TIMESTAMP TIMESTAMP_RESUMED 
,LEAD(TIMESTAMP) OVER (ORDER BY TIMESTAMP) TIMESTAMP_SUSPENDED
,TIMESTAMPDIFF(S,TIMESTAMP_RESUMED,TIMESTAMP_SUSPENDED) DIFF_RESUME_SUSPEND_COMPLETE
,CASE
WHEN DIFF_RESUME_SUSPEND_COMPLETE < 60 THEN 60
ELSE DIFF_RESUME_SUSPEND_COMPLETE
END SECONDS_BILLED -- this needs to go with the SIZE and be multiplied.
,CASE
WHEN DIFF_RESUME_SUSPEND_COMPLETE >= 60 THEN 0
ELSE 60 - DIFF_RESUME_SUSPEND_COMPLETE
END SECONDS_LOST
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_EVENTS_HISTORY_ONGOING WEH
WHERE WAREHOUSE_NAME IS NOT NULL 
AND DATE_TRUNC(DAY,TIMESTAMP) BETWEEN DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE())
AND EVENT_NAME IN ('RESUME_WAREHOUSE','SUSPEND_WAREHOUSE')
AND EVENT_STATE = 'COMPLETED'
QUALIFY EVENT_NAME = 'RESUME_WAREHOUSE'
ORDER BY WAREHOUSE_NAME,TIMESTAMP;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 09, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 09, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;



CREATE OR REPLACE PROCEDURE private.assess_proc_10()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHE_BY_DAYHOUR AS
SELECT 
WAREHOUSE_NAME
,WAREHOUSE_ID
,DATE_TRUNC('DAY',TIMESTAMP_RESUMED) START_TIME_DATE
,DATE_TRUNC('DAY',TIMESTAMP_SUSPENDED) END_TIME_DATE
,DATE_TRUNC('HOUR',TIMESTAMP_RESUMED) START_TIME_HOUR_FULL
,DATE_TRUNC('HOUR',TIMESTAMP_SUSPENDED) END_TIME_HOUR_FULL 
,SUM(SECONDS_BILLED) SECONDS_BILLED_SUM
,SUM(SECONDS_BILLED)/3600 DAMN_CALC_AGAIN --* NUM_NODES
,SUM(SECONDS_LOST) SECONDS_LOST_SUM
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_WHE_TS
GROUP BY 1,2,3,4,5,6
ORDER BY 1,2,3,4,5,6;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 10, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 10, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_11()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHL_TS AS 
SELECT 
WAREHOUSE_NAME
,WAREHOUSE_ID
,START_TIME
,END_TIME
,AVG_RUNNING
,AVG_QUEUED_LOAD
,AVG_QUEUED_PROVISIONING
,AVG_BLOCKED
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_LOAD_HISTORY_ONGOING WLH
WHERE WAREHOUSE_NAME IS NOT NULL 
AND DATE_TRUNC(DAY,START_TIME) BETWEEN DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE());`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 11, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 11, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_12()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHL_BY_DAY AS 
SELECT
DATE_TRUNC('DAY', START_TIME) START_TIME_DATE
,WAREHOUSE_NAME
,WAREHOUSE_ID
,AVG(AVG_RUNNING) AVG_RUNNING_DAILY
,AVG(AVG_QUEUED_LOAD) AVG_QUEUED_LOAD_DAILY 
,AVG(AVG_QUEUED_PROVISIONING) AVG_QUEUED_PROVISIONING_DAILY
,AVG(AVG_BLOCKED) AVG_BLOCKED
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_WHL_TS
WHERE WAREHOUSE_NAME IS NOT NULL 
AND DATE_TRUNC(DAY,START_TIME) BETWEEN DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE())
GROUP BY 1,2,3
ORDER BY 1,2,3;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 12, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 12, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_13()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHL_BY_DAYHOUR AS 
SELECT
DATE_TRUNC('DAY', START_TIME) START_TIME_DATE
,DATE_TRUNC('HOUR', START_TIME) START_TIME_HOUR_FULL
,WAREHOUSE_NAME
,WAREHOUSE_ID
,AVG(AVG_RUNNING) AVG_RUNNING_BY_DAYHOUR
,AVG(AVG_QUEUED_LOAD) AVG_QUEUED_LOAD_BY_DAYHOUR 
,AVG(AVG_QUEUED_PROVISIONING) AVG_QUEUED_PROVISIONING_BY_DAYHOUR
,AVG(AVG_BLOCKED) AVG_BLOCKED_BY_DAYHOUR
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_WHL_TS
WHERE WAREHOUSE_NAME IS NOT NULL 
AND DATE_TRUNC(DAY,START_TIME) BETWEEN DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE())
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 13, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 13, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_14()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHM_TS AS
SELECT 
START_TIME
,END_TIME
,WAREHOUSE_NAME
,WAREHOUSE_ID
,CREDITS_USED
,CREDITS_USED_COMPUTE
,CREDITS_USED_CLOUD_SERVICES
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_ONGOING WMH
WHERE WAREHOUSE_NAME IS NOT NULL 
AND DATE_TRUNC(DAY,START_TIME) BETWEEN DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE())
ORDER BY 1,2,3,4;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_15()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHM_BY_DAY AS 
SELECT
DATE_TRUNC('DAY', START_TIME) START_TIME_DATE
,WAREHOUSE_NAME
,WAREHOUSE_ID
,SUM(CREDITS_USED) CREDITS_USED_DAILY
,SUM(CREDITS_USED_COMPUTE) CREDITS_USED_COMPUTE_DAILY
,SUM(CREDITS_USED_CLOUD_SERVICES) CREDITS_USED_CLOUD_SERVICES_DAILY
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_WHM_TS
GROUP BY 1,2,3
ORDER BY 1,2,3;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 15, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 15, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_16()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHM_BY_DAYHOUR AS 
SELECT
DATE_TRUNC('DAY', START_TIME) START_TIME_DATE
,DATE_TRUNC('HOUR', START_TIME) START_TIME_HOUR_FULL 
,WAREHOUSE_NAME
,WAREHOUSE_ID
,SUM(CREDITS_USED) CREDITS_USED_BY_DAYHOUR
,SUM(CREDITS_USED_COMPUTE) CREDITS_USED_COMPUTE_BY_DAYHOUR
,SUM(CREDITS_USED_CLOUD_SERVICES) CREDITS_USED_CLOUD_SERVICES_BY_DAYHOUR
FROM EXT_SNOPTIMIZER_SERVICES.ASSESS_WHM_TS
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 16, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 16, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;

CREATE OR REPLACE PROCEDURE private.assess_proc_17()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS $$ 
var error = '';
var message = '';

SQL_TEXT1=`CREATE OR REPLACE TABLE EXT_SNOPTIMIZER_SERVICES.ASSESS_WHM_TS AS
SELECT 
START_TIME
,END_TIME
,WAREHOUSE_NAME
,WAREHOUSE_ID
,CREDITS_USED
,CREDITS_USED_COMPUTE
,CREDITS_USED_CLOUD_SERVICES
FROM EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSE_METERING_HISTORY_ONGOING WMH
WHERE WAREHOUSE_NAME IS NOT NULL 
AND DATE_TRUNC(DAY,START_TIME) BETWEEN DATEADD(DAY,-10,CURRENT_DATE()) AND DATEADD(DAY,-1,CURRENT_DATE())
ORDER BY 1,2,3,4;`;


 try{
    snowflake.execute({sqlText: SQL_TEXT1 });
snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 1, 'SUCCESS')` });} catch(err) {
error = error + "ERROR: " + err;
 
    snowflake.execute({sqlText: `INSERT INTO ext_snoptimizer_services.ext_snoptimizer_log(run_id, run_sequence, step_id, status) VALUES (0, 14, 1, 'FAILURE')` });
}


if (error == '') {
    message = "Snoptimizer Assessment Stored Procedures CODE CREATED Successfully";
} else {
message = error;
}
return message;

$$;


CREATE OR REPLACE PROCEDURE private.assessment()
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
    error = ''
    message = ''
        try{
            snowflake.execute({sqlText: "call private.assess_proc_01()"  });
            snowflake.execute({sqlText: "call private.assess_proc_03()"  });
            snowflake.execute({sqlText: "call private.assess_proc_04()"  });
            snowflake.execute({sqlText: "call private.assess_proc_05()"  });
            snowflake.execute({sqlText: "call private.assess_proc_06()"  });
            snowflake.execute({sqlText: "call private.assess_proc_07()"  });
            snowflake.execute({sqlText: "call private.assess_proc_08()"  });
            snowflake.execute({sqlText: "call private.assess_proc_09()"  });
            snowflake.execute({sqlText: "call private.assess_proc_10()"  });
            snowflake.execute({sqlText: "call private.assess_proc_11()"  });
            snowflake.execute({sqlText: "call private.assess_proc_12()"  });
            snowflake.execute({sqlText: "call private.assess_proc_13()"  });
            snowflake.execute({sqlText: "call private.assess_proc_14()"  });
            snowflake.execute({sqlText: "call private.assess_proc_15()"  });
            snowflake.execute({sqlText: "call private.assess_proc_16()"  });
            snowflake.execute({sqlText: "call private.assess_proc_17()"  });
            snowflake.execute({sqlText: "call private.grant_select()" });
            message = message + '\n' +  "Success";
        }
        catch (err){
            error = error + "ERROR: " + err;
        }
    message = 'Message: ' + message;
    message = message + '\n' + 'Error: ' + error;
    return message;
$$;


CREATE OR REPLACE PROCEDURE config.billing_event_rows()
   RETURNS STRING
   LANGUAGE PYTHON
   RUNTIME_VERSION = '3.9'
   PACKAGES = ('snowflake-snowpark-python')
   HANDLER = 'run'
   EXECUTE AS OWNER
   AS $$
import time

# Helper method that calls the system function for billing
def createBillingEvent(session, class_name, subclass_name, start_timestamp, timestamp, base_charge, objects, additional_info):
   session.sql(f"SELECT SYSTEM$CREATE_BILLING_EVENT('{class_name}', '{subclass_name}', {start_timestamp}, {timestamp}, {base_charge}, '{objects}', '{additional_info}')").collect()
   return "Success"

# Handler function for the stored procedure
def run(session):
   # insert code to identify monthly active rows and calculate a charge
   try:

      # Run a query to select rows from a table
      query =  "select count(*) from EXT_SNOPTIMIZER_SERVICES.EXT_SNOPT_WAREHOUSES_ONGOING"
      res = session.sql(query).collect()

      # Define the price to charge per row
      billing_quantity = 0.01

      # Calculate the base charge based on number of rows in the result
      charge = len(res) * billing_quantity

      # Current time in Unix timestamp (epoch) time in milliseconds
      current_time_epoch = int(time.time() * 1000)

      return createBillingEvent(session, 'ROWS_CONSUMED', '', current_time_epoch, current_time_epoch, charge, '["billing_event_rows"]', '')
   except Exception as ex:
      return "Error " + ex
$$;

GRANT USAGE ON PROCEDURE config.billing_event_rows() TO APPLICATION ROLE app_public;


CREATE STREAMLIT core.snoptimizer
  FROM '/streamlit/'
  MAIN_FILE = 'snoptimizer.py';

GRANT USAGE ON STREAMLIT core.snoptimizer TO APPLICATION ROLE app_public;